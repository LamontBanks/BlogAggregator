// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: posts.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :exec
INSERT INTO posts (id, created_at, updated_at, title, url, description, published_at, feed_id)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8
)
`

type CreatePostParams struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Title       string
	Url         string
	Description string
	PublishedAt time.Time
	FeedID      uuid.UUID
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) error {
	_, err := q.db.ExecContext(ctx, createPost,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Title,
		arg.Url,
		arg.Description,
		arg.PublishedAt,
		arg.FeedID,
	)
	return err
}

const getFollowedPosts = `-- name: GetFollowedPosts :many
WITH user_followed_feeds AS (
    SELECT feeds.name AS feed_name, feeds.id AS feed_id
    FROM feed_follows
    INNER JOIN users ON feed_follows.user_id = users.id
    INNER JOIN feeds ON feed_follows.feed_id = feeds.id
    WHERE feed_follows.user_id = $1
)
SELECT posts.title, posts.description, posts.published_at, posts.url, user_followed_feeds.feed_name
FROM posts
INNER JOIN user_followed_feeds ON user_followed_feeds.feed_id = posts.feed_id
ORDER BY posts.published_at DESC
LIMIT $2
`

type GetFollowedPostsParams struct {
	UserID uuid.UUID
	Limit  int32
}

type GetFollowedPostsRow struct {
	Title       string
	Description string
	PublishedAt time.Time
	Url         string
	FeedName    string
}

// Get feeds being followed...
// ...get all posts from those feeds
func (q *Queries) GetFollowedPosts(ctx context.Context, arg GetFollowedPostsParams) ([]GetFollowedPostsRow, error) {
	rows, err := q.db.QueryContext(ctx, getFollowedPosts, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFollowedPostsRow
	for rows.Next() {
		var i GetFollowedPostsRow
		if err := rows.Scan(
			&i.Title,
			&i.Description,
			&i.PublishedAt,
			&i.Url,
			&i.FeedName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecentPostsFromFeed = `-- name: GetRecentPostsFromFeed :many
SELECT feeds.name, posts.title, posts.description, posts.published_at
FROM posts
INNER JOIN feeds ON feeds.id = posts.feed_id
WHERE posts.feed_id = $1
ORDER BY posts.published_at DESC
LIMIT $2
`

type GetRecentPostsFromFeedParams struct {
	FeedID uuid.UUID
	Limit  int32
}

type GetRecentPostsFromFeedRow struct {
	Name        string
	Title       string
	Description string
	PublishedAt time.Time
}

func (q *Queries) GetRecentPostsFromFeed(ctx context.Context, arg GetRecentPostsFromFeedParams) ([]GetRecentPostsFromFeedRow, error) {
	rows, err := q.db.QueryContext(ctx, getRecentPostsFromFeed, arg.FeedID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRecentPostsFromFeedRow
	for rows.Next() {
		var i GetRecentPostsFromFeedRow
		if err := rows.Scan(
			&i.Name,
			&i.Title,
			&i.Description,
			&i.PublishedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
